

class CircularQueue {
   constructor(size) {

     this.queue = [];
     this.read = 0;
     this.write = 0;
     this.max = size - 1;
     let rear = -1;
     let front = -1;

     while (size > 0) {
        this.queue.push(null);
        size--;
     }
   }

   print() {
     return this.queue;
   }

   enqueue(item) {
    // Only change code below this line
       // Only change code below this line
    console.log(this.write, this.max);
    if (this.queue[this.write] === null) {
      this.queue[this.write++] = item;

      if (this.write > this.max) {
        this.write = 0;
      }
      return item;
    }
    return null;
   }


   dequeue() {
    // Only change code below this line
     if (this.queue[this.read] !== null) {
      let item = this.queue[this.read];
      this.queue[this.read++] = null;
      if (this.read > this.max) {
        this.read = 0;
      }
      return item;
    }
    return null;
    // Only change code above this line
  }
   
}

var array = new CircularQueue(5);
array.enqueue("bacon");
array.enqueue("bacon");
array.enqueue("bacon");
array.enqueue("bacon");
array.enqueue("bacon");
array.enqueue("bacon");
array.enqueue("bacon");
array.dequeue();
array.dequeue();



console.log(array)
