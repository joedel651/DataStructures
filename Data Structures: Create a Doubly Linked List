var Node = function(data, prev) {
  this.data = data;
  this.prev = prev;
  this.next = null;
};
var DoublyLinkedList = function() {
  this.head = null;
  this.tail = null;
 
  this.add = function(data) {
    //if the head is null 
		if (!this.head) {
      //base case insert the new node at the head
			this.head = new Node(data, null);
			this.tail = this.head;
			return;
		}
    //if the doubly linked list is not empty then 

    //make previous the tail 
		let node = new Node(data, this.tail);
    //tail points to the next node
	  this.tail.next = node;
    //move the tail to the new node
	  this.tail = node;
    //at the end of the list so the next thing it points to is null
		this.tail.next = null;
	}

  	this.remove = function(data) {
		// Empty list.
		if (!this.head) {
			return null;
		}
		// Removing the head.
		let currentNode = this.head;
    //base case if we are deleting the head just skip it
		if (data === currentNode.data) {
			this.head = currentNode.next;
			currentNode.prev = null;
			return;
		}
    //place holder value to define the previous node
		let prevNode;
    //while currentNode is not null
		while (currentNode) {
      //if currentNode equals the data we want to delete
			if (currentNode.data === data) {
        //skip over that value to delete it
				prevNode.next = currentNode.next;
			
			}
      //iterate through the list keeping track of the 
      //current and previous nodes
			prevNode = currentNode;
			currentNode = currentNode.next;
		}
	}

};
