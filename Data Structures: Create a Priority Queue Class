class PriorityQueue {
   constructor() {
    //initializing queue
    this.collection = [];
  }

  printCollection() {
    console.log(this.collection);
  }
    // Only change code below this line
  enqueue(element){
    
    return this.collection.push(element)
  }

  findPriority(){

    var values = this.collection.map(function(keys) { return keys[1]; });
    var thePriority = Math.min.apply(null, values)
   return this.collection.find(element => element[1] == thePriority)
   
  }
  dequeue(){

  let removeItem = this.findPriority()
    
    return removeItem[0]

  }
 
  size(){
    return this.collection.length
  }

  // returns if the queue is empty
  isEmpty() {
    return this.size() === 0;
  }

}
var arrayed = new PriorityQueue();
arrayed.enqueue(['human', 1])
arrayed.enqueue(['kitten', 3])
arrayed.enqueue(['dog', 7])
arrayed.enqueue(['cat', 2])
console.log(arrayed)
let important = arrayed.findPriority();
console.log(important);
console.log(arrayed.dequeue());
console.log(arrayed)


/*
function arrayRemove(arr) {
  var values = array.map(function(keys) { return keys[1]; });
  var thePriority = Math.min.apply(null, values)

   return arr.filter(function(element){
       return element[1] != thePriority;
   });

}

var result = arrayRemove(array);
//console.log(result)
*/
